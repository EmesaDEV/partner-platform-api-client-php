<?php
/**
 * PutOfferRequest
 *
 * PHP version 5
 *
 * @category Class
 * @package  Emesa\PartnerPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Supplier API
 *
 * Supplier API description... <br /><br /> Open [OpenAPI.json](doc.json).
 *
 * OpenAPI spec version: 0.1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.29
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Emesa\PartnerPlatform\Model;

use \ArrayAccess;
use \Emesa\PartnerPlatform\ObjectSerializer;

/**
 * PutOfferRequest Class Doc Comment
 *
 * @category Class
 * @package  Emesa\PartnerPlatform
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PutOfferRequest implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PutOfferRequest';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'stock' => 'int',
'target_price' => 'int',
'shipping_method_classification' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'stock' => null,
'target_price' => null,
'shipping_method_classification' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'stock' => 'stock',
'target_price' => 'targetPrice',
'shipping_method_classification' => 'shippingMethodClassification'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'stock' => 'setStock',
'target_price' => 'setTargetPrice',
'shipping_method_classification' => 'setShippingMethodClassification'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'stock' => 'getStock',
'target_price' => 'getTargetPrice',
'shipping_method_classification' => 'getShippingMethodClassification'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const SHIPPING_METHOD_CLASSIFICATION_S = 'S';
const SHIPPING_METHOD_CLASSIFICATION_M = 'M';
const SHIPPING_METHOD_CLASSIFICATION_XL = 'XL';
const SHIPPING_METHOD_CLASSIFICATION_SPEC_1 = 'SPEC_1';
const SHIPPING_METHOD_CLASSIFICATION_SPEC_2 = 'SPEC_2';
const SHIPPING_METHOD_CLASSIFICATION_SPEC_3 = 'SPEC_3';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getShippingMethodClassificationAllowableValues()
    {
        return [
            self::SHIPPING_METHOD_CLASSIFICATION_S,
self::SHIPPING_METHOD_CLASSIFICATION_M,
self::SHIPPING_METHOD_CLASSIFICATION_XL,
self::SHIPPING_METHOD_CLASSIFICATION_SPEC_1,
self::SHIPPING_METHOD_CLASSIFICATION_SPEC_2,
self::SHIPPING_METHOD_CLASSIFICATION_SPEC_3,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['stock'] = isset($data['stock']) ? $data['stock'] : null;
        $this->container['target_price'] = isset($data['target_price']) ? $data['target_price'] : null;
        $this->container['shipping_method_classification'] = isset($data['shipping_method_classification']) ? $data['shipping_method_classification'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['stock'] === null) {
            $invalidProperties[] = "'stock' can't be null";
        }
        if ($this->container['target_price'] === null) {
            $invalidProperties[] = "'target_price' can't be null";
        }
        if ($this->container['shipping_method_classification'] === null) {
            $invalidProperties[] = "'shipping_method_classification' can't be null";
        }
        $allowedValues = $this->getShippingMethodClassificationAllowableValues();
        if (!is_null($this->container['shipping_method_classification']) && !in_array($this->container['shipping_method_classification'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'shipping_method_classification', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets stock
     *
     * @return int
     */
    public function getStock()
    {
        return $this->container['stock'];
    }

    /**
     * Sets stock
     *
     * @param int $stock stock
     *
     * @return $this
     */
    public function setStock($stock)
    {
        $this->container['stock'] = $stock;

        return $this;
    }

    /**
     * Gets target_price
     *
     * @return int
     */
    public function getTargetPrice()
    {
        return $this->container['target_price'];
    }

    /**
     * Sets target_price
     *
     * @param int $target_price target_price
     *
     * @return $this
     */
    public function setTargetPrice($target_price)
    {
        $this->container['target_price'] = $target_price;

        return $this;
    }

    /**
     * Gets shipping_method_classification
     *
     * @return string
     */
    public function getShippingMethodClassification()
    {
        return $this->container['shipping_method_classification'];
    }

    /**
     * Sets shipping_method_classification
     *
     * @param string $shipping_method_classification shipping_method_classification
     *
     * @return $this
     */
    public function setShippingMethodClassification($shipping_method_classification)
    {
        $allowedValues = $this->getShippingMethodClassificationAllowableValues();
        if (!in_array($shipping_method_classification, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'shipping_method_classification', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['shipping_method_classification'] = $shipping_method_classification;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
